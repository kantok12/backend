const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api/servicios';

async function testMinimoPersonal() {
  try {
    console.log('üß™ Probando endpoints de m√≠nimo de personal y acuerdos...\n');

    // 1. Listar m√≠nimos de personal existentes
    console.log('1Ô∏è‚É£ Listando m√≠nimos de personal existentes...');
    const minimosResponse = await axios.get(`${BASE_URL}/minimo-personal`);
    console.log(`‚úÖ Status: ${minimosResponse.status}`);
    console.log(`üìä M√≠nimos encontrados: ${minimosResponse.data.data.length}`);
    
    if (minimosResponse.data.data.length > 0) {
      const primerMinimo = minimosResponse.data.data[0];
      console.log(`üìã Primer m√≠nimo: ID ${primerMinimo.id}, Cartera ${primerMinimo.cartera_id}, M√≠nimo base: ${primerMinimo.minimo_base}, M√≠nimo real: ${primerMinimo.minimo_real}`);
    }

    // 2. Crear un nuevo m√≠nimo de personal
    console.log('\n2Ô∏è‚É£ Creando nuevo m√≠nimo de personal...');
    const nuevoMinimo = {
      cartera_id: 1,
      minimo_base: 3,
      descripcion: 'M√≠nimo de personal para pruebas'
    };
    
    const crearMinimoResponse = await axios.post(`${BASE_URL}/minimo-personal`, nuevoMinimo);
    console.log(`‚úÖ Status: ${crearMinimoResponse.status}`);
    console.log(`üìã M√≠nimo creado: ID ${crearMinimoResponse.data.data.id}`);
    const minimoId = crearMinimoResponse.data.data.id;

    // 3. Obtener el m√≠nimo espec√≠fico
    console.log('\n3Ô∏è‚É£ Obteniendo m√≠nimo espec√≠fico...');
    const minimoEspecificoResponse = await axios.get(`${BASE_URL}/minimo-personal/${minimoId}`);
    console.log(`‚úÖ Status: ${minimoEspecificoResponse.status}`);
    console.log(`üìã M√≠nimo base: ${minimoEspecificoResponse.data.data.minimo_base}, M√≠nimo real: ${minimoEspecificoResponse.data.data.minimo_real}`);

    // 4. Crear un acuerdo de incremento
    console.log('\n4Ô∏è‚É£ Creando acuerdo de incremento...');
    const nuevoAcuerdo = {
      minimo_personal_id: minimoId,
      tipo_acuerdo: 'incremento',
      valor_modificacion: 2,
      fecha_inicio: new Date().toISOString().split('T')[0],
      fecha_fin: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 30 d√≠as
      motivo: 'Incremento temporal por alta demanda',
      aprobado_por: 'Gerente de Operaciones'
    };
    
    const crearAcuerdoResponse = await axios.post(`${BASE_URL}/acuerdos`, nuevoAcuerdo);
    console.log(`‚úÖ Status: ${crearAcuerdoResponse.status}`);
    console.log(`üìã Acuerdo creado: ID ${crearAcuerdoResponse.data.data.id}`);
    const acuerdoId = crearAcuerdoResponse.data.data.id;

    // 5. Calcular m√≠nimo real
    console.log('\n5Ô∏è‚É£ Calculando m√≠nimo real...');
    const calcularResponse = await axios.get(`${BASE_URL}/minimo-personal/${minimoId}/calcular`);
    console.log(`‚úÖ Status: ${calcularResponse.status}`);
    console.log(`üìä M√≠nimo real calculado: ${calcularResponse.data.data.minimo_real}`);
    console.log(`üìã Acuerdos aplicados: ${calcularResponse.data.data.acuerdos_aplicados.length}`);

    // 6. Listar acuerdos
    console.log('\n6Ô∏è‚É£ Listando acuerdos...');
    const acuerdosResponse = await axios.get(`${BASE_URL}/acuerdos`);
    console.log(`‚úÖ Status: ${acuerdosResponse.status}`);
    console.log(`üìä Acuerdos encontrados: ${acuerdosResponse.data.data.length}`);

    // 7. Crear un acuerdo de reducci√≥n
    console.log('\n7Ô∏è‚É£ Creando acuerdo de reducci√≥n...');
    const acuerdoReduccion = {
      minimo_personal_id: minimoId,
      tipo_acuerdo: 'reduccion',
      valor_modificacion: -1,
      fecha_inicio: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 15 d√≠as
      fecha_fin: new Date(Date.now() + 45 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 45 d√≠as
      motivo: 'Reducci√≥n por mantenimiento programado',
      aprobado_por: 'Supervisor de Mantenimiento'
    };
    
    const crearReduccionResponse = await axios.post(`${BASE_URL}/acuerdos`, acuerdoReduccion);
    console.log(`‚úÖ Status: ${crearReduccionResponse.status}`);
    console.log(`üìã Acuerdo de reducci√≥n creado: ID ${crearReduccionResponse.data.data.id}`);

    // 8. Calcular m√≠nimo real con ambos acuerdos
    console.log('\n8Ô∏è‚É£ Calculando m√≠nimo real con ambos acuerdos...');
    const calcularFinalResponse = await axios.get(`${BASE_URL}/minimo-personal/${minimoId}/calcular`);
    console.log(`‚úÖ Status: ${calcularFinalResponse.status}`);
    console.log(`üìä M√≠nimo real final: ${calcularFinalResponse.data.data.minimo_real}`);
    console.log(`üìã Total acuerdos aplicados: ${calcularFinalResponse.data.data.acuerdos_aplicados.length}`);

    // 9. Listar acuerdos pr√≥ximos a vencer
    console.log('\n9Ô∏è‚É£ Listando acuerdos pr√≥ximos a vencer...');
    const vencerResponse = await axios.get(`${BASE_URL}/acuerdos/vencer?dias=60`);
    console.log(`‚úÖ Status: ${vencerResponse.status}`);
    console.log(`üìä Acuerdos pr√≥ximos a vencer: ${vencerResponse.data.data.length}`);

    // 10. Actualizar m√≠nimo de personal
    console.log('\nüîü Actualizando m√≠nimo de personal...');
    const actualizarMinimo = {
      minimo_base: 4,
      descripcion: 'M√≠nimo actualizado para pruebas'
    };
    
    const actualizarResponse = await axios.put(`${BASE_URL}/minimo-personal/${minimoId}`, actualizarMinimo);
    console.log(`‚úÖ Status: ${actualizarResponse.status}`);
    console.log(`üìã M√≠nimo actualizado: Base ${actualizarResponse.data.data.minimo_base}`);

    console.log('\nüéâ Todas las pruebas completadas exitosamente!');

  } catch (error) {
    console.error('‚ùå Error en las pruebas:', error.message);
    if (error.response) {
      console.error('üìä Status:', error.response.status);
      console.error('üìã Response:', JSON.stringify(error.response.data, null, 2));
    }
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  testMinimoPersonal();
}

module.exports = { testMinimoPersonal };

