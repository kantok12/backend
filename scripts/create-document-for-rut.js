const fs = require('fs');
const path = require('path');
const { pool } = require('../config/database');

async function createDocumentForSpecificRut() {
  console.log('üìÅ CREANDO DOCUMENTO PARA RUT ESPEC√çFICO');
  console.log('=========================================');
  
  const targetRut = '15338132-1'; // RUT que est√° intentando descargar
  
  try {
    // 1. Verificar si el RUT existe en la base de datos
    console.log(`\nüîç Verificando RUT: ${targetRut}`);
    const personaResult = await pool.query(`
      SELECT rut, nombres, cargo, centro_costo, zona_geografica
      FROM mantenimiento.personal_disponible 
      WHERE rut = $1
    `, [targetRut]);
    
    if (personaResult.rows.length === 0) {
      console.log(`‚ùå RUT ${targetRut} no encontrado en la base de datos`);
      console.log('\nüí° Creando registro de prueba...');
      
      // Crear el registro de la persona
      const createPersonaResult = await pool.query(`
        INSERT INTO mantenimiento.personal_disponible (
          rut, sexo, fecha_nacimiento, licencia_conducir, 
          talla_zapatos, talla_pantalones, talla_poleras, 
          cargo, estado_id, zona_geografica, nombres
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
        RETURNING *
      `, [
        targetRut,
        'M',
        '1982-09-14',
        'B12345678',
        '42',
        'L',
        'M',
        'Experto en Prevenci√≥n De Riesgos',
        1,
        'valparaiso',
        'Schaffhauser Rodrigo Andres'
      ]);
      
      console.log('‚úÖ Registro de persona creado exitosamente');
    } else {
      console.log('‚úÖ RUT encontrado en la base de datos');
      console.log(`   - Nombre: ${personaResult.rows[0].nombres || 'Sin nombre'}`);
      console.log(`   - Cargo: ${personaResult.rows[0].cargo || 'Sin cargo'}`);
      console.log(`   - Zona: ${personaResult.rows[0].zona_geografica || 'Sin zona'}`);
    }
    
    // 2. Verificar si ya existe un documento para este RUT
    console.log(`\nüîç Verificando documentos existentes para RUT: ${targetRut}`);
    const existingDocs = await pool.query(`
      SELECT id, nombre_documento, tipo_documento, nombre_archivo, fecha_subida
      FROM mantenimiento.documentos 
      WHERE rut_persona = $1 AND activo = true
      ORDER BY fecha_subida DESC
    `, [targetRut]);
    
    if (existingDocs.rows.length > 0) {
      console.log(`‚úÖ Ya existen ${existingDocs.rows.length} documento(s) para este RUT:`);
      existingDocs.rows.forEach((doc, index) => {
        console.log(`   ${index + 1}. ${doc.nombre_documento} (ID: ${doc.id})`);
      });
      return;
    }
    
    // 3. Crear documento de "Asignaci√≥n Laboral" para este RUT espec√≠fico
    const documentContent = `CERTIFICADO DE CURSO - ASIGNACI√ìN LABORAL
===============================================

Fecha: ${new Date().toLocaleDateString('es-CL')}
Curso: Asignaci√≥n Laboral
Participante: ${personaResult.rows[0]?.nombres || 'Schaffhauser Rodrigo Andres'}
RUT: ${targetRut}
Instituci√≥n: Centro de Capacitaci√≥n y Desarrollo Profesional
Duraci√≥n: 24 horas
Modalidad: Presencial

CONTENIDOS DEL CURSO:
=====================

M√≥dulo 1: Fundamentos de Asignaci√≥n Laboral
- Conceptos b√°sicos de asignaci√≥n
- Marco legal y normativo
- Responsabilidades del trabajador
- Derechos laborales

M√≥dulo 2: Procesos de Asignaci√≥n
- Procedimientos de asignaci√≥n
- Documentaci√≥n requerida
- Evaluaci√≥n de competencias
- Seguimiento y control

M√≥dulo 3: Herramientas y Sistemas
- Sistemas de informaci√≥n laboral
- Plataformas digitales
- Reportes y estad√≠sticas
- Mantenimiento de registros

M√≥dulo 4: Casos Pr√°cticos
- Resoluci√≥n de casos reales
- Buenas pr√°cticas
- Prevenci√≥n de errores
- Mejora continua

EVALUACI√ìN:
===========
- Examen te√≥rico: Aprobado
- Evaluaci√≥n pr√°ctica: Aprobado
- Proyecto final: Aprobado
- Nota final: 7.2

COMPETENCIAS DESARROLLADAS:
===========================
‚úì Conocimiento de procesos de asignaci√≥n laboral
‚úì Manejo de sistemas de informaci√≥n
‚úì Capacidad de an√°lisis y resoluci√≥n de problemas
‚úì Comunicaci√≥n efectiva
‚úì Trabajo en equipo
‚úì Cumplimiento de normativas

Este certificado acredita que el participante ha completado 
satisfactoriamente el curso de "Asignaci√≥n Laboral" y est√° 
capacitado para desempe√±ar funciones relacionadas con la 
gesti√≥n de asignaciones laborales.

Firma digital: [SISTEMA DE MANTENIMIENTO]
Fecha de emisi√≥n: ${new Date().toISOString()}
C√≥digo de verificaci√≥n: ASIGN-${Date.now()}
Versi√≥n: 1.0
`;
    
    // 4. Crear archivo temporal
    const tempFileName = `certificado_asignacion_laboral_${targetRut.replace(/-/g, '_')}_${Date.now()}.txt`;
    const tempFilePath = path.join(__dirname, tempFileName);
    fs.writeFileSync(tempFilePath, documentContent);
    
    console.log(`\nüìÑ Documento creado: ${tempFileName}`);
    
    // 5. Subir documento a la base de datos
    console.log('\nüì§ Subiendo documento a la base de datos...');
    
    try {
      // Leer el archivo
      const fileBuffer = fs.readFileSync(tempFilePath);
      const fileName = `certificado_asignacion_laboral_${targetRut.replace(/-/g, '_')}_${Date.now()}.txt`;
      const uploadPath = path.join(__dirname, '../uploads/documentos', fileName);
      
      // Crear directorio si no existe
      const uploadDir = path.dirname(uploadPath);
      if (!fs.existsSync(uploadDir)) {
        fs.mkdirSync(uploadDir, { recursive: true });
      }
      
      // Guardar archivo
      fs.writeFileSync(uploadPath, fileBuffer);
      
      // Insertar en base de datos
      const insertResult = await pool.query(`
        INSERT INTO mantenimiento.documentos (
          rut_persona, 
          nombre_documento, 
          tipo_documento, 
          nombre_archivo, 
          nombre_original, 
          tipo_mime, 
          tama√±o_bytes, 
          ruta_archivo, 
          descripcion, 
          fecha_subida, 
          subido_por, 
          activo
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
        RETURNING id
      `, [
        targetRut,
        'Certificado del curso asignacion laboral',
        'certificado_curso',
        fileName,
        tempFileName,
        'text/plain',
        fileBuffer.length,
        uploadPath,
        `Certificado del curso "Asignaci√≥n Laboral" para ${personaResult.rows[0]?.nombres || targetRut}`,
        new Date(),
        'SISTEMA_SERVIDOR',
        true
      ]);
      
      console.log(`‚úÖ Documento subido exitosamente (ID: ${insertResult.rows[0].id})`);
      
      // 6. Verificar que el documento se puede obtener
      console.log('\nüîç Verificando que el documento est√° disponible...');
      const verifyResult = await pool.query(`
        SELECT id, nombre_documento, nombre_archivo, ruta_archivo
        FROM mantenimiento.documentos 
        WHERE rut_persona = $1 AND activo = true
        ORDER BY fecha_subida DESC
        LIMIT 1
      `, [targetRut]);
      
      if (verifyResult.rows.length > 0) {
        const doc = verifyResult.rows[0];
        console.log('‚úÖ Documento verificado y disponible:');
        console.log(`   - ID: ${doc.id}`);
        console.log(`   - Nombre: ${doc.nombre_documento}`);
        console.log(`   - Archivo: ${doc.nombre_archivo}`);
        console.log(`   - Ruta: ${doc.ruta_archivo}`);
        
        console.log('\nüéâ ¬°PROBLEMA SOLUCIONADO!');
        console.log('=========================');
        console.log(`‚úÖ Documento creado para RUT: ${targetRut}`);
        console.log('‚úÖ El frontend ahora puede descargar el documento');
        console.log('\nüîó Endpoints para probar:');
        console.log(`   - GET /api/documentos/persona/${targetRut}`);
        console.log(`   - GET /api/documentos/${doc.id}/descargar`);
      }
      
    } catch (error) {
      console.log(`‚ùå Error al subir documento: ${error.message}`);
    }
    
    // 7. Limpiar archivo temporal
    if (fs.existsSync(tempFilePath)) {
      fs.unlinkSync(tempFilePath);
    }
    
  } catch (error) {
    console.error('‚ùå Error general:', error.message);
  } finally {
    process.exit(0);
  }
}

// Ejecutar la funci√≥n
createDocumentForSpecificRut();
