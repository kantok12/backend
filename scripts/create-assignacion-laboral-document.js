const fs = require('fs');
const path = require('path');
const { pool } = require('../config/database');

async function createAssignacionLaboralDocument() {
  console.log('üìÅ CREANDO DOCUMENTO PARA CURSO "ASIGNACI√ìN LABORAL"');
  console.log('====================================================');
  
  try {
    // 1. Verificar documentos existentes
    console.log('\nüîç Verificando documentos existentes...');
    const existingDocs = await pool.query(`
      SELECT id, nombre_documento, tipo_documento, rut_persona, nombre_archivo
      FROM mantenimiento.documentos 
      WHERE activo = true
      ORDER BY fecha_subida DESC
    `);
    
    console.log(`üìã Documentos existentes: ${existingDocs.rows.length}`);
    existingDocs.rows.forEach((doc, index) => {
      console.log(`   ${index + 1}. ${doc.nombre_documento} (${doc.tipo_documento}) - ${doc.rut_persona}`);
    });
    
    // 2. Buscar si ya existe un documento para "asignaci√≥n laboral"
    const assignacionDoc = existingDocs.rows.find(doc => 
      doc.nombre_documento.toLowerCase().includes('asignacion') ||
      doc.nombre_documento.toLowerCase().includes('laboral')
    );
    
    if (assignacionDoc) {
      console.log(`\n‚úÖ Ya existe documento para asignaci√≥n laboral: ${assignacionDoc.nombre_documento}`);
      console.log(`   ID: ${assignacionDoc.id}`);
      console.log(`   Archivo: ${assignacionDoc.nombre_archivo}`);
      console.log(`   RUT: ${assignacionDoc.rut_persona}`);
      return;
    }
    
    // 3. Obtener personas disponibles para asociar el documento
    console.log('\nüë• Obteniendo personas disponibles...');
    const personasResult = await pool.query(`
      SELECT rut, nombres, cargo, centro_costo
      FROM mantenimiento.personal_disponible 
      WHERE nombres IS NOT NULL
      ORDER BY nombres
      LIMIT 5
    `);
    
    if (personasResult.rows.length === 0) {
      console.log('‚ùå No se encontraron personas en la base de datos');
      return;
    }
    
    console.log('üë• Personas disponibles:');
    personasResult.rows.forEach((persona, index) => {
      console.log(`   ${index + 1}. ${persona.rut} - ${persona.nombres} (${persona.cargo})`);
    });
    
    // 4. Crear documento de "Asignaci√≥n Laboral"
    const documentContent = `CERTIFICADO DE CURSO - ASIGNACI√ìN LABORAL
===============================================

Fecha: ${new Date().toLocaleDateString('es-CL')}
Curso: Asignaci√≥n Laboral
Instituci√≥n: Centro de Capacitaci√≥n y Desarrollo Profesional
Duraci√≥n: 24 horas
Modalidad: Presencial

CONTENIDOS DEL CURSO:
=====================

M√≥dulo 1: Fundamentos de Asignaci√≥n Laboral
- Conceptos b√°sicos de asignaci√≥n
- Marco legal y normativo
- Responsabilidades del trabajador
- Derechos laborales

M√≥dulo 2: Procesos de Asignaci√≥n
- Procedimientos de asignaci√≥n
- Documentaci√≥n requerida
- Evaluaci√≥n de competencias
- Seguimiento y control

M√≥dulo 3: Herramientas y Sistemas
- Sistemas de informaci√≥n laboral
- Plataformas digitales
- Reportes y estad√≠sticas
- Mantenimiento de registros

M√≥dulo 4: Casos Pr√°cticos
- Resoluci√≥n de casos reales
- Buenas pr√°cticas
- Prevenci√≥n de errores
- Mejora continua

EVALUACI√ìN:
===========
- Examen te√≥rico: Aprobado
- Evaluaci√≥n pr√°ctica: Aprobado
- Proyecto final: Aprobado
- Nota final: 7.2

COMPETENCIAS DESARROLLADAS:
===========================
‚úì Conocimiento de procesos de asignaci√≥n laboral
‚úì Manejo de sistemas de informaci√≥n
‚úì Capacidad de an√°lisis y resoluci√≥n de problemas
‚úì Comunicaci√≥n efectiva
‚úì Trabajo en equipo
‚úì Cumplimiento de normativas

Este certificado acredita que el participante ha completado 
satisfactoriamente el curso de "Asignaci√≥n Laboral" y est√° 
capacitado para desempe√±ar funciones relacionadas con la 
gesti√≥n de asignaciones laborales.

Firma digital: [SISTEMA DE MANTENIMIENTO]
Fecha de emisi√≥n: ${new Date().toISOString()}
C√≥digo de verificaci√≥n: ASIGN-${Date.now()}
Versi√≥n: 1.0
`;
    
    // 5. Crear archivo temporal
    const tempFileName = `certificado_asignacion_laboral_${Date.now()}.txt`;
    const tempFilePath = path.join(__dirname, tempFileName);
    fs.writeFileSync(tempFilePath, documentContent);
    
    console.log(`\nüìÑ Documento creado: ${tempFileName}`);
    
    // 6. Subir documento para cada persona (m√°ximo 3 para no saturar)
    console.log('\nüì§ Subiendo documentos para personas seleccionadas...');
    
    let documentosSubidos = 0;
    let errores = 0;
    
    const personasSeleccionadas = personasResult.rows.slice(0, 3); // M√°ximo 3 personas
    
    for (const persona of personasSeleccionadas) {
      try {
        // Leer el archivo
        const fileBuffer = fs.readFileSync(tempFilePath);
        const fileName = `certificado_asignacion_laboral_${persona.rut.replace(/-/g, '_')}_${Date.now()}.txt`;
        const uploadPath = path.join(__dirname, '../uploads/documentos', fileName);
        
        // Crear directorio si no existe
        const uploadDir = path.dirname(uploadPath);
        if (!fs.existsSync(uploadDir)) {
          fs.mkdirSync(uploadDir, { recursive: true });
        }
        
        // Guardar archivo
        fs.writeFileSync(uploadPath, fileBuffer);
        
        // Insertar en base de datos
        const insertResult = await pool.query(`
          INSERT INTO mantenimiento.documentos (
            rut_persona, 
            nombre_documento, 
            tipo_documento, 
            nombre_archivo, 
            nombre_original, 
            tipo_mime, 
            tama√±o_bytes, 
            ruta_archivo, 
            descripcion, 
            fecha_subida, 
            subido_por, 
            activo
          ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
          RETURNING id
        `, [
          persona.rut,
          'Certificado del curso asignacion laboral',
          'certificado_curso',
          fileName,
          tempFileName,
          'text/plain',
          fileBuffer.length,
          uploadPath,
          `Certificado del curso "Asignaci√≥n Laboral" para ${persona.nombres || persona.rut}`,
          new Date(),
          'SISTEMA_SERVIDOR',
          true
        ]);
        
        console.log(`   ‚úÖ ${persona.rut}: Documento subido (ID: ${insertResult.rows[0].id})`);
        documentosSubidos++;
        
      } catch (error) {
        console.log(`   ‚ùå ${persona.rut}: Error - ${error.message}`);
        errores++;
      }
    }
    
    // 7. Limpiar archivo temporal
    if (fs.existsSync(tempFilePath)) {
      fs.unlinkSync(tempFilePath);
    }
    
    // 8. Resumen final
    console.log('\nüìä RESUMEN DE CREACI√ìN:');
    console.log('========================');
    console.log(`‚úÖ Documentos subidos exitosamente: ${documentosSubidos}`);
    console.log(`‚ùå Errores: ${errores}`);
    console.log(`üìö Curso: Asignaci√≥n Laboral`);
    console.log(`üë• Personas: ${personasSeleccionadas.length}`);
    
    if (documentosSubidos > 0) {
      console.log('\nüéâ ¬°DOCUMENTOS DE ASIGNACI√ìN LABORAL DISPONIBLES!');
      console.log('================================================');
      console.log('Ahora puedes descargar documentos para el curso "asignaci√≥n laboral"');
      console.log('\nüîó Para probar la descarga:');
      console.log('   - GET /api/documentos (listar todos)');
      console.log('   - GET /api/documentos/persona/{RUT} (por persona)');
      console.log('   - GET /api/documentos/{ID}/descargar (descargar archivo)');
      
      // Mostrar algunos RUTs para probar
      console.log('\nüß™ RUTs con documentos de asignaci√≥n laboral:');
      personasSeleccionadas.forEach(persona => {
        console.log(`   - ${persona.rut} (${persona.nombres || 'Sin nombre'})`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Error general:', error.message);
  } finally {
    process.exit(0);
  }
}

// Ejecutar la funci√≥n
createAssignacionLaboralDocument();
